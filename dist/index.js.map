{"version":3,"file":"index.js","sources":["../src/isValid.js","../src/isOld.js","../src/provinces.js","../src/getProvince.js"],"sourcesContent":["/**\n * Returns true if the string is a valid car plate (only after year 2000)\n * @param {string} value\n * @returns {boolean}\n * @since 0.0.1\n * @example\n * isValid(\"2345BCF\"); // => true\n */\nconst isValid = (value) => {\n  const num = !value ? \"\" : value;\n  const cleaned = num.replace(\n    /^[\\s]*([0-9]{4})[^A-Z0-9]*([BCDFGHJKLMNPRSTVWXYZ]{3})[\\s]*$/i,\n    \"$1$2\"\n  );\n\n  if (cleaned.length !== 7) {\n    return false;\n  }\n\n  return /^[0-9]{4}[BCDFGHJKLMNPRSTVWXYZ]{3}$/i.test(cleaned);\n};\n\nexport { isValid };\n","/**\n * Returns true if the string is a valid car plate in the old system (1971-2000)\n * @param {string} value\n * @returns {boolean}\n * @since 0.0.2\n * @example\n * isOld(\"GI-1234-CS\"); // => true\n */\nconst isOld = (value) => {\n  const num = !value ? \"\" : value;\n  const cleaned = num.replace(\n    /^[\\s]*([A-Z]{1,3})[^A-Z0-9]*([0-9]{4})[^A-Z0-9]*([A-Z]{2})[\\s]*$/i,\n    \"$1$2$3\"\n  );\n\n  if (cleaned.length < 7 || cleaned.length > 9) {\n    return false;\n  }\n\n  return /^[A-Z]{1,3}[0-9]{4}[A-Z]{2}$/i.test(cleaned);\n};\n\nexport { isOld };\n","export const PROVINCES = {\n  A: \"Province of Alicante\",\n  AB: \"Province of Albacete\",\n  AL: \"Province of Almería\",\n  AV: \"Province of Ávila\",\n  B: \"Province of Barcelona\",\n  BA: \"Province of Badajoz\",\n  BI: \"Bilbao\",\n  BU: \"Province of Burgos\",\n  C: \"Province of A Coruña\",\n  CA: \"Province of Cádiz\",\n  CC: \"Province of Cáceres\",\n  CE: \"Ceuta\",\n  CO: \"Province of Córdoba\",\n  CR: \"Province of Ciudad Real\",\n  CS: \"Castelló\",\n  CU: \"Province of Cuenca\",\n  FP: \"Bioko\",\n  GC: \"Province of Las Palmas\",\n  GE: \"Gerona (Girona)\",\n  GI: \"Province of Girona\",\n  GR: \"Province of Granada\",\n  GU: \"Province of Guadalajara\",\n  H: \"Province of Huelva\",\n  HU: \"Province of Huesca\",\n  IF: \"Ifni\",\n  J: \"Province of Jaén\",\n  L: \"Province of Lleida\",\n  LE: \"Province of León\",\n  LO: \"Logroño\",\n  LR: \"La Rioja\",\n  LU: \"Province of Lugo\",\n  M: \"Community of Madrid\",\n  MA: \"Province of Málaga\",\n  ML: \"Melilla\",\n  MU: \"Region of Murcia\",\n  NA: \"Navarre\",\n  O: \"Oviedo\",\n  OU: \"Province of Ourense\",\n  P: \"Province of Palencia\",\n  PM: \"Palma, Majorca\",\n  PO: \"Province of Pontevedra\",\n  RM: \"Rio Muni\",\n  S: \"Santander\",\n  SA: \"Province of Salamanca\",\n  SE: \"Province of Seville\",\n  SG: \"Province of Segovia\",\n  SO: \"Province of Soria\",\n  SS: \"Donostia\",\n  T: \"Province of Tarragona\",\n  TE: \"Province of Teruel\",\n  TF: \"Province of Santa Cruz de Tenerife\",\n  TO: \"Province of Toledo\",\n  V: \"Province of Valencia\",\n  VA: \"Province of Valladolid\",\n  VI: \"Vitoria\",\n  Z: \"Province of Zaragoza\",\n  ZA: \"Province of Zamora\"\n};\n","import { PROVINCES } from \"./provinces\";\nimport { isOld } from \"./isOld\";\n\n/**\n * Returns the province for a valid car plate in the old system (1971-2000)\n * @param {string} value\n * @returns {string}\n * @since 0.0.3\n * @example\n * getProvince(\"GI-1234-CS\"); // => \"Province of Girona\"\n */\nconst getProvince = (value) => {\n  if (!isOld(value)) {\n    throw new Error(\"Only old plates contain information about the province.\");\n  }\n\n  const num = !value ? \"\" : value;\n  const code = num.replace(\n    /^[\\s]*([A-Z]{1,3})[^A-Z0-9]*([0-9]{4})[^A-Z0-9]*([A-Z]{2})[\\s]*$/i,\n    \"$1\"\n  );\n\n  if (code.length !== 1 && code.length !== 2) {\n    throw new Error(\"This plate does not contains information about the province.\");\n  }\n\n  return PROVINCES[code];\n};\n\nexport { getProvince };\n"],"names":["isValid","value","num","cleaned","replace","length","test","isOld","PROVINCES","A","AB","AL","AV","B","BA","BI","BU","C","CA","CC","CE","CO","CR","CS","CU","FP","GC","GE","GI","GR","GU","H","HU","IF","J","L","LE","LO","LR","LU","M","MA","ML","MU","NA","O","OU","P","PM","PO","RM","S","SA","SE","SG","SO","SS","T","TE","TF","TO","V","VA","VI","Z","ZA","getProvince","Error","code"],"mappings":"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"}